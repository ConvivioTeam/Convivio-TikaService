openapi: 3.0.1
info:
  title: "DocShare Tika Microservice API"
  description: >-
    The Tika microservice allows a DocShare microservice to pass a document 
    via HTTP PUT and have to extract text from the body and headers of the
    document. The extracted text is stored in a local MongoDB and can be
    retrieved at a later point for other purposes, such as preview, indexing,
    text analysis, etc.
  version: 1.0.0
  contact:
    name: "Convivio DocShare Tika team"
    url: 'https://developer.docshare.weareconvivio.com/tika'
    email: "infra+docshare.tika@weareconvivio.com"
servers:
  - url: '{scheme}://tika.docshare.weareconvivio.com/'
    variables:
      scheme:
        description: 'The DocShare Tika service API is accessible via https and http'
        enum:
          - 'https'
          - 'http'
        default: 'https'
tags:
  - name: metadata
    description: Find out about the Tika service datasets
  - name: health
    description: Health check
paths:
  /:
    get:
      tags:
        - metadata
      responses:
        '200':
          description: Returns a list of Tika service resource endpoints
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Resources'
        default:
          $ref: '#components/responses/Error'
                
  /versions:
    get:
      tags:
        - metadata
      operationId: listVersions
      summary: List API versions
      responses:
        200:
          description: |-
            200 response
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Versions'
        default:
          $ref: '#components/responses/Error'
  /health/alive: 
    get:
      description: "This endpoint returns a 200 status code when the HTTP server is up running.\nThis status does currently not include checks whether the database connection is working.\nThis endpoint does not require the `X-Forwarded-Proto` header when TLS termination is set.\n\nBe aware that if you are running multiple nodes, the health status will never refer to the cluster state, only to a single instance."
      tags:
        - health
      summary: "Check the Alive Status"
      operationId: isInstanceAlive
      responses:
        200: 
          description: "Health Status"
          content:
            application/json:
              schema:
                $ref: '#/components/responses/healthStatus'
        500:
          $ref: '#components/responses/Error'
  /health/ready:
    get:
      description: "This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g.\nthe database) are responsive as well.\n\nThis status does currently not include checks whether the database connection is working.\nThis endpoint does not require the `X-Forwarded-Proto` header when TLS termination is set.\n\nBe aware that if you are running multiple nodes of ORY Hydra, the health status will never refer to the cluster state, only to a single instance."
      tags:
        - health
      summary: "Check the Readiness Status"
      operationId: isInstanceReady
      responses:
        200:
          description: 'Health status'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/healthStatus;'
        503:
          description: 'Health Not Ready status'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/healthNotReadyStatus'
components:
  responses:
    Error: 
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#components/schemas/Error'
  schemas:
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Resources:
      title: Resources
      items:
        $ref: '#components/schemas/Resource'
    Resource:
      required:
        - apiPath
        - description
        - apiVersionNumber
        - apiUrl
        - apiDocumentationUrl
      properties:
        apiPath:
          type: string
          example: "/versions"
        description:
          type: string
          example: "List of API versions"
        apiVersionNumber:
          type: number
          example: 1.1
        apiUrl:
          type: string
          example: "https://tika.docshare.weareconvivio.com/versions"
        apiDocumentationUrl: 
          type: string
          example: "https://developer.docshare.weareconvivio.com/tika/api/versions"
    Versions:
      title: Versions
      items:
        $ref: '#components/schemas/Version'
    Version:
      required:
        - version
        - id
        - updated
        - current
        - deprecated
      properties:
        version:
          type: number
          example: 1.1
        id:
          type: string
          example: "v1.1"
        updated:
          type: dateTime
          example: "2018-09-13T16:52:11"
        current:
          type: boolean
          example: true
        deprecated:
          type: boolean
          example: false
          definitions:
    healthNotReadyStatus:
        type: object
        properties:
          errors:
            description: 'Errors contains a list of errors that caused the not ready status.'
            type: object
            additionalProperties:
              type: string
    healthStatus:
      type: object
      properties:
        status:
          description: 'Status always contains "ok".'
          type: string
        


                